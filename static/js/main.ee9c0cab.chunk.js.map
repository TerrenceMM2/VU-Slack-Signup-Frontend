{"version":3,"sources":["components/Alert.js","components/SignupForm.js","App.js","serviceWorker.js","index.js"],"names":["styles","alertTitle","color","alertBody","AlertDialog","props","React","useState","setOpen","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","style","id","DialogContent","DialogContentText","DialogActions","Button","onClick","handleClose","autoFocus","SignupForm","state","firstName","lastName","email","message","alertShow","isLoading","recaptchaRef","createRef","recaptchaSet","recaptchaValue","button","float","helper","counter","buttonProgress","position","top","left","recaptcha","display","handleRecaptcha","setState","handleInputChange","event","target","name","value","handleSubmitForm","axios","method","url","data","trim","msg","then","res","msgTitle","msgBody","catch","err","ref","onSubmit","this","Grid","container","spacing","item","xs","sm","validators","errorMessages","fullWidth","input","label","onChange","variant","inputProps","maxLength","InputProps","endAdornment","FormHelperText","length","rows","multiline","lg","theme","sitekey","process","disabled","type","CircularProgress","size","Component","createMuiTheme","palette","primary","light","main","dark","contrastText","typography","fontFamily","join","fontWeightLight","fontWeightRegular","fontWeightMedium","fontSize","overrides","MuiInputLabel","root","MuiInputBase","MuiOutlinedInput","borderColor","MuiDialog","paper","backgroundColor","App","headerLogo","margin","maxWidth","marginTop","title","textAlign","src","alt","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee9c0cab.chunk.js","sourcesContent":["import React from \"react\";\n\n// Material UI Components\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst styles = {\n    alertTitle: {\n        color: \"#FFF\",\n    },\n    alertBody: {\n        color: \"#FFF\"\n    }\n}\n\nexport default function AlertDialog(props) {\n\n\tconst [setOpen] = React.useState(false);\n\n\tconst handleClose = () => {\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n        <div>\n            <Dialog\n                open={props.open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                >\n                <DialogTitle style={styles.alertTitle} id=\"alert-dialog-title\">\n                    {props.alertTitle}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText style={styles.alertBody} id=\"alert-dialog-description\">\n                        {props.alertBody}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={props.handleClose}\n                        color=\"primary\"\n                        autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n        \n\t);\n}","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport axios from \"axios\";\nimport Alert from \"../components/Alert\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nexport default class SignupForm extends Component {\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        message: \"\",\n        alertShow: false,\n        alertTitle: \"\",\n        alertBody: \"\",\n        isLoading: false,\n        recaptchaRef: React.createRef(),\n        recaptchaSet: false,\n        recaptchaValue: null,\n    };\n\n    styles = {\n        button: {\n            float: \"right\",\n            color: \"#333\",\n        },\n        helper: {\n            color: \"#777\",\n        },\n        counter: {\n            color: \"#777\",\n        },\n        buttonProgress: {\n            color: \"#D8AB4C\",\n            float: \"right\",\n            position: \"relative\",\n            top: \"8px\",\n            left: \"54px\",\n        },\n        recaptcha: {\n            display: \"inline\",\n        },\n    };\n\n    handleRecaptcha = (recaptchaValue) => {\n        this.setState({ recaptchaValue });\n        if (recaptchaValue !== null) this.setState({ recaptchaSet: true });\n    };\n\n    handleClose = () => {\n        this.setState({ alertShow: false });\n    };\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    };\n\n    handleSubmitForm = (event) => {\n        const { firstName, lastName, email, message } = this.state;\n\n        this.setState({ isLoading: true });\n\n        if (this.state.recaptchaSet === false) {\n            this.setState({\n                alertTitle: \"Are you a robot?\",\n                alertBody: \"Please check the reCAPTCHA box.\",\n                alertShow: true,\n                isLoading: false,\n            });\n        } else {\n            axios({\n                method: \"post\",\n                url:\n                    \"https://eta0k8k1pf.execute-api.us-east-2.amazonaws.com/prod/api/submit\",\n                data: {\n                    name: `${firstName.trim()} ${lastName.trim()}`,\n                    email: email.trim(),\n                    msg: message.trim(),\n                },\n            })\n                .then((res) => {\n                    this.setState({\n                        firstName: \"\",\n                        lastName: \"\",\n                        email: \"\",\n                        message: \"\",\n                        alertTitle: res.data.msgTitle,\n                        alertBody: res.data.msgBody,\n                        alertShow: true,\n                        isLoading: false,\n                        recaptchaSet: false,\n                        recaptchaValue: null,\n                    });\n                })\n                .catch((err) => {\n                    this.setState({\n                        firstName: \"\",\n                        lastName: \"\",\n                        email: \"\",\n                        message: \"\",\n                        alertTitle: err.data.msgTitle,\n                        alertBody: err.data.msgBody,\n                        alertShow: true,\n                        isLoading: false,\n                    });\n                });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <ValidatorForm ref=\"form\" onSubmit={this.handleSubmitForm}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextValidator\n                                validators={[\"required\"]}\n                                errorMessages={[\"This field is required.\"]}\n                                fullWidth\n                                style={this.styles.input}\n                                id=\"firstName\"\n                                label=\"First Name *\"\n                                name=\"firstName\"\n                                value={this.state.firstName}\n                                onChange={this.handleInputChange}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    maxLength: 40,\n                                }}\n                                InputProps={{\n                                    endAdornment: (\n                                        <FormHelperText\n                                            style={this.styles.counter}>\n                                            {this.state.firstName.length}/40\n                                        </FormHelperText>\n                                    ),\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextValidator\n                                validators={[\"required\"]}\n                                errorMessages={[\"This field is required.\"]}\n                                fullWidth\n                                style={this.styles.input}\n                                id=\"lastName\"\n                                label=\"Last Name *\"\n                                name=\"lastName\"\n                                value={this.state.lastName}\n                                onChange={this.handleInputChange}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    maxLength: 40,\n                                }}\n                                InputProps={{\n                                    endAdornment: (\n                                        <FormHelperText\n                                            style={this.styles.counter}>\n                                            {this.state.lastName.length}/40\n                                        </FormHelperText>\n                                    ),\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextValidator\n                                fullWidth\n                                label=\"Email *\"\n                                id=\"email\"\n                                style={this.styles.input}\n                                onChange={this.handleInputChange}\n                                name=\"email\"\n                                value={this.state.email}\n                                validators={[\"required\", \"isEmail\"]}\n                                errorMessages={[\n                                    \"This field is required\",\n                                    \"Email is not valid.\",\n                                ]}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    maxLength: 40,\n                                }}\n                                InputProps={{\n                                    endAdornment: (\n                                        <FormHelperText\n                                            style={this.styles.counter}>\n                                            {this.state.email.length}/40\n                                        </FormHelperText>\n                                    ),\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextValidator\n                                fullWidth\n                                validators={[\"required\"]}\n                                errorMessages={[\"This field is required\"]}\n                                style={this.styles.input}\n                                id=\"message\"\n                                label=\"Message *\"\n                                name=\"message\"\n                                value={this.state.message}\n                                onChange={this.handleInputChange}\n                                rows={\"4\"}\n                                multiline={true}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    maxLength: 400,\n                                }}\n                                InputProps={{\n                                    endAdornment: (\n                                        <FormHelperText\n                                            style={this.styles.counter}>\n                                            {this.state.message.length}/400\n                                        </FormHelperText>\n                                    ),\n                                }}\n                            />\n                            <FormHelperText style={this.styles.helper}>\n                                Please provide proof of your alumni status.\n                                (e.g. LinkedIn Profile Link, Name of Reference,\n                                etc.)\n                            </FormHelperText>\n                        </Grid>\n                        <Grid item lg={6} xs={12}>\n                            <ReCAPTCHA\n                                style={{ display: \"inline-block\" }}\n                                theme=\"dark\"\n                                ref={this.state.recaptchaRef}\n                                sitekey={process.env.REACT_APP_SITE_KEY}\n                                onChange={this.handleRecaptcha}\n                            />\n                        </Grid>\n                        <Grid item lg={6} xs={12}>\n                            <Button\n                                color=\"primary\"\n                                style={this.styles.button}\n                                variant=\"contained\"\n                                disabled={this.state.isLoading}\n                                type=\"submit\">\n                                Submit\n                            </Button>\n                            {this.state.isLoading && (\n                                <CircularProgress\n                                    size={24}\n                                    style={this.styles.buttonProgress}\n                                />\n                            )}\n                        </Grid>\n                    </Grid>\n                </ValidatorForm>\n                <Alert\n                    alertTitle={this.state.alertTitle}\n                    handleClose={this.handleClose}\n                    open={this.state.alertShow}\n                    alertBody={this.state.alertBody}\n                />\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport SignupForm from \"./components/SignupForm\";\n\nimport Container from \"@material-ui/core/Container\";\nimport {MuiThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#D8AB4C',\n            main: '#D8AB4C',\n            dark: '#D8AB4C',\n            contrastText: '#fff'\n        }\n    },\n    typography: {\n        fontFamily: ['Source Sans Pro'].join(','),\n        fontWeightLight: 300,\n        fontWeightRegular: 500,\n        fontWeightMedium: 700,\n        fontSize: 16\n    },\n    overrides: {\n      MuiInputLabel: {\n        root: {\n          color: '#FFF',\n        }\n      },\n      MuiInputBase: {\n        root: {\n            color: '#FFF'\n        }\n      },\n      MuiOutlinedInput: {\n        root: {\n          \"& fieldset\": {\n            borderColor: \"#444\"\n          }\n        }\n      },\n      MuiDialog: {\n        paper: {\n          backgroundColor: \"#333\"\n        }\n      }\n    }\n});\n\nexport class App extends Component {\n\n  styles = {\n      headerLogo: {\n          display: \"block\",\n          margin: \"0 auto\",\n          maxWidth: \"85vw\",\n          marginTop: \"2rem\"\n      },\n      title: {\n          color: \"#FFF\",\n          textAlign: \"center\",\n          marginTop: \"4rem\"\n      }\n  }\n\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div>\n                    <img style={this.styles.headerLogo} src=\"./header.png\" alt=\"page header\"/>\n                    <h1 style={this.styles.title}>Slack Signup Form</h1>\n                    <Container maxWidth=\"md\">\n                        <SignupForm/>\n                    </Container>\n                </div>\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}